import { Node, DOMParser, DOMSerializer, Fragment } from 'prosemirror-model';
import { TextSelection, NodeSelection, AllSelection } from 'prosemirror-state';
import { sinkListItem, liftListItem } from 'prosemirror-schema-list';
import { schema } from './config/schema';
import { indentRules } from './config/indent-rules';
import { safeString, first, last, unique, split, filter, trim, removeEmptyEntries } from './util';
const { bulletList, doc, listItem, orderedList } = schema.nodes;
const getTypeName = (n) => {
    return n instanceof Node ? n.type.name : n.name;
};
const ɵ0 = getTypeName;
const isListType = (node) => {
    const nodeName = typeof node === 'string' ? node : getTypeName(node);
    return nodeName === getTypeName(orderedList) || nodeName === getTypeName(bulletList);
};
const ɵ1 = isListType;
const getListTypeFromPos = (pos) => Array.from(new Array(pos.depth), (_, index) => pos.depth - index)
    .map((depth) => pos.node(depth))
    .map(getTypeName)
    .find(isListType);
const ɵ2 = getListTypeFromPos;
const getNodeMarksOfType = (markType, n) => n.marks.filter(m => m.type.name === markType.name);
const ɵ3 = getNodeMarksOfType;
const findParentNode = (predicate) => {
    return (selection) => {
        const { $from } = selection;
        for (let i = $from.depth; i > 0; i--) {
            const node = $from.node(i);
            if (predicate(node)) {
                return { depth: i, node };
            }
        }
    };
};
const ɵ4 = findParentNode;
const findNthParentNode = (predicate, depth = 1) => {
    return (selection) => {
        const { $from } = selection;
        for (let i = $from.depth; i > 0; i--) {
            const node = $from.node(i);
            if (predicate(node)) {
                depth = depth - 1;
                if (depth === 0) {
                    return { depth: i, node };
                }
            }
        }
    };
};
const ɵ5 = findNthParentNode;
const findNthParentNodeOfType = (nodeType, depth = 1) => {
    return (selection) => {
        return findNthParentNode((node) => getTypeName(node) === getTypeName(nodeType), depth)(selection);
    };
};
const ɵ6 = findNthParentNodeOfType;
/**
 * @hidden
 */
export const getUniqueStyleValues = (style, cssStyle) => {
    if (style.hasNodesWithoutMarks) {
        return '';
    }
    const uniqueMarkValues = style.marks
        .filter(m => m.type.name === 'style')
        .map((m) => m.attrs.style)
        .map(split(';'))
        .map(filter((m) => m.includes(cssStyle)))
        // guards against empty array
        .map((cssStyleValues) => (cssStyleValues.length !== 0 ? cssStyleValues : [`${cssStyle}: INVALID`]))
        .map(first)
        .map(split(':'))
        .map(last)
        .map(trim)
        .reduce((acc, curr) => (acc.indexOf(curr) > -1 ? acc : [...acc, curr]), []);
    if (uniqueMarkValues.indexOf('INVALID') > -1 || uniqueMarkValues.length !== 1) {
        return '';
    }
    return uniqueMarkValues[0];
};
/**
 * @hidden
 */
export const isMarkActive = (state, markType) => {
    const { from, $from, to, empty } = state.selection;
    if (empty) {
        return !!markType.isInSet(state.storedMarks || $from.marks());
    }
    else {
        return !!state.doc.rangeHasMark(from, to, markType);
    }
};
/**
 * @hidden
 */
export const isNodeActive = (state, nodeType, attrs) => {
    const parent = findParentNode(node => getTypeName(node) === getTypeName(nodeType))(state.selection);
    if (!parent || (attrs && !Object.keys(attrs).length)) {
        return !!parent;
    }
    return parent.node.hasMarkup(nodeType, attrs);
};
/**
 * @hidden
 */
export const isInListOfType = ({ selection }, nodeType) => {
    const { $anchor, $head } = selection;
    let topNodes = [];
    const anchorParentName = getListTypeFromPos($anchor);
    const headParentName = getListTypeFromPos($head);
    selection.content().content.descendants((n) => {
        topNodes = [...topNodes, n];
        return false;
    });
    const nonListTopNodes = topNodes.filter((n) => {
        return getTypeName(n) !== getTypeName(bulletList) && getTypeName(n) !== getTypeName(orderedList);
    });
    // no selection
    if (selection instanceof TextSelection && selection.$cursor) {
        return getListTypeFromPos(selection.$cursor) === nodeType.name;
    }
    const hasSingleUniqueTopNode = unique(topNodes.map(getTypeName)).length === 1;
    // with selection
    if (nonListTopNodes.length > 0 || !hasSingleUniqueTopNode) {
        return false;
    }
    // from this point on we have guaranteed that the top nodes are all of the same LIST type
    // same top list node
    const node = first(topNodes);
    let listChildNodes = [getTypeName(node)];
    node.descendants((childNode) => {
        if (isListType(childNode)) {
            listChildNodes = [...listChildNodes, getTypeName(childNode)];
        }
    });
    if (last(listChildNodes) !== nodeType.name) {
        return false;
    }
    return anchorParentName === headParentName && anchorParentName === nodeType.name;
};
/**
 * @hidden
 */
export const getActiveMarks = ({ selection }, markType) => {
    let hasNodesWithoutMarks = false;
    if (selection instanceof TextSelection && selection.$cursor) {
        return {
            hasNodesWithoutMarks,
            marks: selection.$cursor.marks().filter(m => (markType ? m.type.name === markType.name : true))
        };
    }
    const filtered = [];
    selection.content().content.descendants((n) => {
        if (n.type.name === 'text') {
            const nodeMarksOfType = markType ? getNodeMarksOfType(markType, n) : n.marks;
            if (n.marks.length > 0 && nodeMarksOfType.length > 0) {
                filtered.push(...nodeMarksOfType);
            }
            else {
                hasNodesWithoutMarks = true;
            }
        }
    });
    return {
        hasNodesWithoutMarks,
        marks: filtered
    };
};
/**
 * @hidden
 */
export const getNodeTagName = (node) => {
    const parseRules = node.type.spec.parseDOM || [];
    const nodeAttrs = node.attrs;
    let parseRule;
    if (parseRules.length === 1) {
        parseRule = parseRules[0];
    }
    else {
        // TODO: refactor this
        // removeEmptyEntries is needed due to the default attributes in the schema
        parseRule = parseRules.find((rule) => {
            // getAttrs needs a DOM Node
            const domNode = DOMSerializer.fromSchema(schema).serializeNode(node);
            return JSON.stringify(rule.getAttrs(domNode)) === JSON.stringify(removeEmptyEntries(nodeAttrs));
        });
    }
    if (parseRule) {
        // regex is needed since image node has tag = img[src]
        // https://stackoverflow.com/a/25777116
        return parseRule.tag.toLowerCase().replace(/ *\[[^\]]*]/, '');
    }
    else {
        return '';
    }
};
/**
 * @hidden
 */
export const activeNode = (state) => {
    let node;
    if (state.selection instanceof AllSelection) {
        node = state.doc;
    }
    else if (state.selection instanceof TextSelection) {
        const $anchor = state.selection.$anchor;
        const blockNode = $anchor.node($anchor.blockRange().depth);
        const isDoc = getTypeName(blockNode) === getTypeName(doc);
        node = isDoc ? $anchor.node() : blockNode;
    }
    else if (state.selection instanceof NodeSelection) {
        node = state.selection.node;
    }
    return {
        name: getTypeName(node),
        tag: getNodeTagName(node)
    };
};
/**
 * @hidden
 */
export const canIndent = (state, nodeType) => {
    return isNodeActive(state, nodeType) && sinkListItem(nodeType)(state);
};
/**
 * @hidden
 */
export const canOutdent = (state, nodeType) => {
    const isNestedInOL = !!findNthParentNodeOfType(orderedList, 2)(state.selection);
    const isNestedInUL = !!findNthParentNodeOfType(bulletList, 2)(state.selection);
    return isNodeActive(state, nodeType) && (isNestedInOL || isNestedInUL) && liftListItem(nodeType)(state);
};
/**
 * @hidden
 */
export const getMark = (state, markType) => {
    let { from, $from, to, empty } = state.selection;
    const stateDoc = state.doc;
    let mark;
    if (empty) {
        mark = markType.isInSet(state.storedMarks || $from.marks());
    }
    else {
        stateDoc.nodesBetween(from, to, node => {
            if (node.isInline && !mark) {
                mark = markType.isInSet(node.marks);
            }
        });
    }
    return mark;
};
/**
 * @hidden
 */
export const getNodeFromSelection = (state) => {
    if (state.selection instanceof NodeSelection) {
        return state.selection.node;
    }
};
/**
 * @hidden
 */
export const getSelectionText = (state) => {
    const sel = state.selection;
    if (sel instanceof TextSelection || sel instanceof AllSelection) {
        const fragment = sel.content().content;
        return fragment.textBetween(0, fragment.size);
    }
    return '';
};
/**
 * @hidden
 */
export const getHTML = (state) => {
    const fragment = DOMSerializer.fromSchema(state.schema).serializeFragment(state.doc.content);
    const element = document.createElement('div');
    element.appendChild(fragment);
    return element.innerHTML;
};
/**
 * @hidden
 */
export const createContentNode = (value) => {
    const element = document.createElement('div');
    // when using ngModel with name attr, content is null and errors, default params dont help
    element.innerHTML = safeString(value).trim();
    return DOMParser.fromSchema(schema).parse(element);
};
/**
 * @hidden
 */
export const hasSameMarkup = (dom1, dom2) => {
    const fragment1 = Fragment.from(createContentNode(dom1));
    const fragment2 = Fragment.from(createContentNode(dom2));
    return fragment1.eq(fragment2);
};
/**
 * @hidden
 * Checks if the selection contains a specific type of node.
 */
const hasNode = (state, nodeType) => {
    let { from, to } = state.selection;
    let result = false;
    state.doc.nodesBetween(from, to, node => {
        result = result || node.type === nodeType;
        return !result;
    });
    return result;
};
const ɵ7 = hasNode;
/**
 * @hidden
 */
export const blockNodes = (state) => {
    const selection = state.selection;
    let { from, to, $from } = selection;
    const result = [];
    if (selection.node) {
        if (selection.node.isBlock) {
            result.push(selection.node);
        }
        else if ($from.parent && $from.parent.isBlock) {
            result.push($from.parent);
        }
    }
    else {
        state.doc.nodesBetween(from, to, node => {
            if (node.isBlock) {
                result.push(node);
            }
        });
    }
    return result;
};
/**
 * @hidden
 * Checks if any block element in the selection is aligned.
 */
export const isAligned = (state, actions) => {
    const blocks = blockNodes(state);
    let result = false;
    blocks.forEach(node => {
        if (!result && node.type.isTextblock && node.attrs.style) {
            const action = actions.find(a => a.node === node.type.name);
            if (action) {
                result = action.style.every(style => {
                    return !!style.value && new RegExp(`${style.name}:\\s?${style.value}`, 'i').test(node.attrs.style);
                });
            }
        }
    });
    return result;
};
/**
 * @hidden
 * Checks if any block element in the selection is indented.
 */
export const isIndented = (state, actions) => {
    const blocks = blockNodes(state);
    let result = false;
    blocks.forEach(node => {
        if (!result && node.type.isTextblock && node.attrs.style) {
            const action = actions.find(a => a.node === node.type.name);
            if (action) {
                const reIndent = new RegExp(`${action.style}:\\s?\\d+${action.unit}`, 'i');
                result = reIndent.test(node.attrs.style);
            }
        }
    });
    return result;
};
/**
 * @hidden
 */
export const canIndentAsListItem = (state) => sinkListItem(listItem)(state);
/**
 * @hidden
 */
export const canOutdentAsListItem = (state) => liftListItem(listItem)(state);
/**
 * @hidden
 */
export const canBeIndented = (state, rules) => {
    const nodes = state.schema.nodes;
    return ((isIndented(state, rules) || indentRules.some(rule => nodes[rule.node] && hasNode(state, nodes[rule.node]))) &&
        !hasNode(state, listItem));
};
export { ɵ0, ɵ1, ɵ2, ɵ3, ɵ4, ɵ5, ɵ6, ɵ7 };
