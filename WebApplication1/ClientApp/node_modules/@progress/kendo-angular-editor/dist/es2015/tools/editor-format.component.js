import { Component, TemplateRef, ViewChild, ElementRef, forwardRef, Output, Host, EventEmitter } from '@angular/core';
import { ToolBarToolComponent } from '@progress/kendo-angular-toolbar';
import { outerWidth, isPresent } from '../util';
import { EditorComponent } from '../editor.component';
import { EditorLocalizationService } from '../localization/editor-localization.service';
/**
 * A component which configures an existing `DropDownListComponent` as an Editor tool
 * ([see example]({% slug toolbartools_editor %}#toc-built-in-tools)).
 * The component associates a `kendo-dropdownlist` with an Editor command that changes the format of a content block and
 * automatically defines the options of the drop-down list and sets its values.
 *
 * @example
 * ```ts-no-run
 * <kendo-toolbar-dropdownlist kendoEditorFormat></kendo-toolbar-dropdownlist>
 * ```
 */
export class EditorFormatComponent extends ToolBarToolComponent {
    constructor(editor, localization) {
        super();
        this.editor = editor;
        this.localization = localization;
        /**
         * Fires when the user updates the value of the drop-down list.
         */
        this.valueChange = new EventEmitter();
    }
    ngOnInit() {
        this.itemDisabled = (itemArgs) => {
            return itemArgs.dataItem.tag === null;
        };
        this.data = [
            { text: 'Paragraph', tag: 'p' },
            { text: 'Quotation', tag: 'blockquote' },
            { text: 'Heading 1', tag: 'h1' },
            { text: 'Heading 2', tag: 'h2' },
            { text: 'Heading 3', tag: 'h3' },
            { text: 'Heading 4', tag: 'h4' },
            { text: 'Heading 5', tag: 'h5' },
            { text: 'Heading 6', tag: 'h6' }
        ];
        setTimeout(() => this.defaultItem = { text: this.title, tag: null });
        this.subs = this.editor.stateChange.subscribe(({ format }) => {
            const index = this.data.findIndex(item => item.tag === format.tag);
            this.value = index !== -1 ? format.tag : null;
        });
    }
    /**
     * @hidden
     */
    onValueChange(ev) {
        if (isPresent(ev)) {
            this.editor.exec('format', { tag: ev });
            this.editor.focus();
            this.valueChange.emit(this.data.find(d => d.tag === ev));
        }
    }
    ngOnDestroy() {
        this.subs.unsubscribe();
    }
    get outerWidth() {
        if (this.element) {
            return outerWidth(this.element.nativeElement);
        }
    }
    get title() {
        return this.localization.get('format');
    }
}
EditorFormatComponent.decorators = [
    { type: Component, args: [{
                // tslint:disable-next-line:no-forward-ref
                providers: [{ provide: ToolBarToolComponent, useExisting: forwardRef(() => EditorFormatComponent) }],
                selector: 'kendo-toolbar-dropdownlist[kendoEditorFormat]',
                template: `
        <ng-template #toolbarTemplate>
            <kendo-dropdownlist
                #element
                [defaultItem]="defaultItem"
                [textField]="'text'"
                [valueField]="'tag'"
                [data]="data"
                [(value)]="value"
                [valuePrimitive]="true"
                [itemDisabled]="itemDisabled"
                [attr.title]="title"
                (valueChange)="onValueChange($event)"
            >
                <ng-template kendoDropDownListItemTemplate let-dataItem>
                    <ng-container [ngSwitch]="dataItem.tag">
                        <span *ngSwitchCase="'h1'" style="display: block; font-size: 2em; margin-left: 0; font-weight: bold;">
                            {{ dataItem.text }}
                        </span>

                        <span *ngSwitchCase="'h2'" style="display: block; font-size: 1.5em; margin-left: 0; font-weight: bold;">
                            {{ dataItem.text }}
                        </span>

                        <span *ngSwitchCase="'h3'" style="display: block; font-size: 1.17em; margin-left: 0; font-weight: bold;">
                            {{ dataItem.text }}
                        </span>

                        <span *ngSwitchCase="'h4'" style="display: block; font-size: 1em; margin-left: 0; font-weight: bold;">
                            {{ dataItem.text }}
                        </span>

                        <span *ngSwitchCase="'h5'" style="display: block; font-size: .83em; margin-left: 0; font-weight: bold;">
                            {{ dataItem.text }}
                        </span>

                        <span *ngSwitchCase="'h6'" style="display: block; font-size: .67em; margin-left: 0; font-weight: bold;">
                            {{ dataItem.text }}
                        </span>

                        <span *ngSwitchCase="'p'" style="display: block; margin-left: 0;">
                            {{ dataItem.text }}
                        </span>

                        <span *ngSwitchCase="'blockquote'" style="display: block; margin-left: 0;">
                            {{ dataItem.text }}
                        </span>

                        <span *ngSwitchDefault>{{ dataItem.text }}</span>
                    </ng-container>
                </ng-template>
            </kendo-dropdownlist>
        </ng-template>
    `
            },] },
];
/** @nocollapse */
EditorFormatComponent.ctorParameters = () => [
    { type: EditorComponent, decorators: [{ type: Host }] },
    { type: EditorLocalizationService }
];
EditorFormatComponent.propDecorators = {
    valueChange: [{ type: Output }],
    toolbarTemplate: [{ type: ViewChild, args: ['toolbarTemplate',] }],
    element: [{ type: ViewChild, args: ['element',] }]
};
