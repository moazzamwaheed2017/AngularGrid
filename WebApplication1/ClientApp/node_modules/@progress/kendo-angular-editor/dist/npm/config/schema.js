"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var prosemirror_model_1 = require("prosemirror-model");
var util_1 = require("../util");
var SLOT = 0; //https://prosemirror.net/docs/guide/#schema.serialization_and_parsing
var commonAttributes = function () {
    return {
        class: { default: null },
        id: { default: null },
        style: { default: null }
    };
};
var ɵ0 = commonAttributes;
exports.ɵ0 = ɵ0;
var ɵ1 = function (dom) { return ({
    href: dom.getAttribute('href'),
    target: dom.getAttribute('target'),
    title: dom.getAttribute('title')
}); }, ɵ2 = function (mark) { return [
    'a',
    // Add default value for href. Otherwise the link is not rendered properly(blue with underline)
    Object.assign({}, { href: '' }, util_1.removeEmptyEntries(mark.attrs)),
    SLOT
]; }, ɵ3 = function () { return ['em', SLOT]; }, ɵ4 = function (value) { return /^(bold(er)?|[5-9]\d{2,})$/.test(value) && null; }, ɵ5 = function () { return ['strong', SLOT]; }, ɵ6 = function () { return ['code', SLOT]; }, ɵ7 = function () { return ['u', SLOT]; }, ɵ8 = function () { return ['del', SLOT]; }, ɵ9 = function () { return ['sub', SLOT]; }, ɵ10 = function () { return ['sup', SLOT]; }, ɵ11 = function (dom) { return ({
    style: dom.getAttribute('style')
}); }, ɵ12 = function (mark) { return ['span', Object.assign({}, util_1.removeEmptyEntries(mark.attrs)), SLOT]; };
exports.ɵ1 = ɵ1;
exports.ɵ2 = ɵ2;
exports.ɵ3 = ɵ3;
exports.ɵ4 = ɵ4;
exports.ɵ5 = ɵ5;
exports.ɵ6 = ɵ6;
exports.ɵ7 = ɵ7;
exports.ɵ8 = ɵ8;
exports.ɵ9 = ɵ9;
exports.ɵ10 = ɵ10;
exports.ɵ11 = ɵ11;
exports.ɵ12 = ɵ12;
/**
 * @hidden
 */
var marks = {
    // :: MarkSpec A link. Has `href` and `title` attributes. `title`
    // defaults to an empty string. Rendered and parsed as an `<a>`
    // element.
    link: {
        attrs: {
            href: { default: '' },
            target: { default: null },
            title: { default: null }
        },
        inclusive: false,
        parseDOM: [
            {
                getAttrs: ɵ1,
                tag: 'a[href]'
            }
        ],
        toDOM: ɵ2
    },
    // :: MarkSpec An emphasis mark. Rendered as an `<em>` element.
    // Has parse rules that also match `<i>` and `font-style: italic`.
    em: {
        parseDOM: [{ tag: 'i' }, { tag: 'em' }, { style: 'font-style=italic' }],
        toDOM: ɵ3
    },
    // :: MarkSpec A strong mark. Rendered as `<strong>`, parse rules
    // also match `<b>` and `font-weight: bold`.
    strong: {
        parseDOM: [
            { tag: 'strong' },
            // This works around a Google Docs misbehavior where
            // pasted content will be inexplicably wrapped in `<b>`
            // tags with a font-weight normal `{tag: 'b', getAttrs: node => node.style.fontWeight != 'normal' && null}`,
            {
                // According to the docs, the value can be a DOM element (for tag rules) or a string (for style rules).
                getAttrs: ɵ4,
                style: 'font-weight'
            }
        ],
        toDOM: ɵ5
    },
    // :: MarkSpec Code font mark. Represented as a `<code>` element.
    code: {
        parseDOM: [{ tag: 'code' }],
        toDOM: ɵ6
    },
    // :: MarkSpec An underline mark. Rendered as a `<u>` element.
    // Parse rules also match `text-decoration: underline`.
    underline: {
        parseDOM: [{ tag: 'u' }, { style: 'text-decoration=underline' }],
        toDOM: ɵ7
    },
    // :: MarkSpec A strikethrough mark. Rendered as a `<del>` element.
    // Parse rules also match `<s>`, `<strike>`, `text-decoration: line-through`.
    strikethrough: {
        parseDOM: [{ tag: 'del' }, { tag: 's' }, { tag: 'strike' }, { style: 'text-decoration=line-through' }],
        toDOM: ɵ8
    },
    // :: MarkSpec A subscript mark. Rendered as a `<sub>` element.
    // Parse rules also match `vertical-align: sub`.
    subscript: {
        parseDOM: [{ tag: 'sub' }, { style: 'vertical-align=sub' }],
        toDOM: ɵ9
    },
    // :: MarkSpec A superscript mark. Rendered as a `<sup>` element.
    // Parse rules also match `vertical-align: super`.
    superscript: {
        parseDOM: [{ tag: 'sup' }, { style: 'vertical-align=super' }],
        toDOM: ɵ10
    },
    style: {
        attrs: tslib_1.__assign({}, commonAttributes(), { style: {} }),
        parseDOM: [
            {
                // think about a way to remove span tags with empty style attributes or no style attributes at all
                getAttrs: ɵ11,
                tag: 'span[style]'
            }
        ],
        toDOM: ɵ12
    }
};
var ɵ13 = function (node) { return (util_1.isEmpty(node.attrs) ? ['p', SLOT] : ['p', util_1.removeEmptyEntries(node.attrs), SLOT]); }, ɵ14 = function (node) { return ['blockquote', util_1.removeEmptyEntries(node.attrs), SLOT]; }, ɵ15 = function () { return ['hr']; }, ɵ16 = function (dom) { return Object.assign({}, util_1.serializeDOMAttrs(dom), { level: 1 }); }, ɵ17 = function (dom) { return Object.assign({}, util_1.serializeDOMAttrs(dom), { level: 2 }); }, ɵ18 = function (dom) { return Object.assign({}, util_1.serializeDOMAttrs(dom), { level: 3 }); }, ɵ19 = function (dom) { return Object.assign({}, util_1.serializeDOMAttrs(dom), { level: 4 }); }, ɵ20 = function (dom) { return Object.assign({}, util_1.serializeDOMAttrs(dom), { level: 5 }); }, ɵ21 = function (dom) { return Object.assign({}, util_1.serializeDOMAttrs(dom), { level: 6 }); }, ɵ22 = function (node) {
    var attrs = util_1.removeEntries(node.attrs, function (key) { return key !== 'level'; });
    return ['h' + node.attrs.level, util_1.removeEmptyEntries(attrs), SLOT];
}, ɵ23 = function () { return ['pre', ['code', SLOT]]; }, ɵ24 = function (dom) { return ({
    alt: dom.getAttribute('alt'),
    height: dom.getAttribute('height'),
    src: dom.getAttribute('src'),
    width: dom.getAttribute('width')
}); }, ɵ25 = function (node) { return ['img', util_1.removeEmptyEntries(node.attrs)]; }, ɵ26 = function () { return ['br']; }, ɵ27 = function (node) { return ['li', util_1.removeEmptyEntries(node.attrs), SLOT]; }, ɵ28 = function (dom) { return ({
    order: dom.hasAttribute('start') ? parseInt(dom.getAttribute('start'), 10) : 1
}); }, ɵ29 = function (node) { return (node.attrs.order === 1 ? ['ol', SLOT] : ['ol', { start: node.attrs.order }, SLOT]); }, ɵ30 = function () { return ['ul', SLOT]; };
exports.ɵ13 = ɵ13;
exports.ɵ14 = ɵ14;
exports.ɵ15 = ɵ15;
exports.ɵ16 = ɵ16;
exports.ɵ17 = ɵ17;
exports.ɵ18 = ɵ18;
exports.ɵ19 = ɵ19;
exports.ɵ20 = ɵ20;
exports.ɵ21 = ɵ21;
exports.ɵ22 = ɵ22;
exports.ɵ23 = ɵ23;
exports.ɵ24 = ɵ24;
exports.ɵ25 = ɵ25;
exports.ɵ26 = ɵ26;
exports.ɵ27 = ɵ27;
exports.ɵ28 = ɵ28;
exports.ɵ29 = ɵ29;
exports.ɵ30 = ɵ30;
/**
 * @hidden
 */
var nodes = {
    // :: NodeSpec The top level document node.
    doc: {
        content: 'block+'
    },
    // :: NodeSpec A plain textblock paragraph. Represented
    // as a `<p>` element in the DOM.
    paragraph: {
        attrs: tslib_1.__assign({}, commonAttributes()),
        content: 'inline*',
        group: 'block',
        parseDOM: [
            {
                getAttrs: util_1.serializeDOMAttrs,
                tag: 'p'
            }
        ],
        toDOM: ɵ13
    },
    // :: NodeSpec A blockquote (`<blockquote>`) which wraps one or more blocks.
    blockquote: {
        attrs: tslib_1.__assign({}, commonAttributes()),
        content: 'inline*',
        defining: true,
        group: 'block',
        parseDOM: [{ tag: 'blockquote' }],
        toDOM: ɵ14
    },
    // :: NodeSpec A horizontal (`<hr>`) rule.
    horizontalRule: {
        group: 'block',
        parseDOM: [{ tag: 'hr' }],
        toDOM: ɵ15
    },
    // :: NodeSpec A heading textblock with a `level` attribute that
    // has to hold a number from 1 to 6. Parsed and serialized as an `<h1>` to
    // an `<h6>` element.
    heading: {
        attrs: tslib_1.__assign({ level: { default: 1 } }, commonAttributes()),
        content: 'inline*',
        defining: true,
        group: 'block',
        parseDOM: [
            { tag: 'h1', getAttrs: ɵ16 },
            { tag: 'h2', getAttrs: ɵ17 },
            { tag: 'h3', getAttrs: ɵ18 },
            { tag: 'h4', getAttrs: ɵ19 },
            { tag: 'h5', getAttrs: ɵ20 },
            { tag: 'h6', getAttrs: ɵ21 }
        ],
        toDOM: ɵ22
    },
    // :: NodeSpec A code listing. Prevents marks or non-text inline
    // nodes by default. Represented as a `<pre>` element with a
    // `<code>` element inside.
    codeBlock: {
        code: true,
        content: 'text*',
        defining: true,
        group: 'block',
        marks: '',
        parseDOM: [
            {
                preserveWhitespace: 'full',
                tag: 'pre'
            }
        ],
        toDOM: ɵ23
    },
    // :: NodeSpec The text node.
    text: {
        group: 'inline'
    },
    // :: NodeSpec An inline image (`<img>`) node. Supports `src`,
    // `alt`, and `href` attributes. The last two default to an empty
    // string.
    image: {
        attrs: tslib_1.__assign({}, commonAttributes(), { alt: { default: null }, height: { default: null }, src: {}, width: { default: null } }),
        draggable: true,
        group: 'inline',
        inline: true,
        parseDOM: [
            {
                getAttrs: ɵ24,
                tag: 'img[src]'
            }
        ],
        toDOM: ɵ25
    },
    // :: NodeSpec A hard line break. Represented as a `<br>` element in the DOM.
    hardBreak: {
        group: 'inline',
        inline: true,
        parseDOM: [{ tag: 'br' }],
        selectable: false,
        toDOM: ɵ26
    },
    // :: NodeSpec A list item. Represented as a `<li>` element.
    listItem: {
        attrs: tslib_1.__assign({}, commonAttributes()),
        content: 'paragraph block*',
        marks: '_',
        parseDOM: [{ tag: 'li' }],
        toDOM: ɵ27
    },
    // :: NodeSpec An ordered list. Represented as an `<ol>` element.
    // Has a single `order` attribute which determines the number at which
    // the list starts counting. Defaults to 1.
    orderedList: {
        attrs: {
            order: {
                default: 1
            }
        },
        content: 'listItem+',
        group: 'block',
        parseDOM: [
            {
                getAttrs: ɵ28,
                tag: 'ol'
            }
        ],
        toDOM: ɵ29
    },
    // :: NodeSec An unordered list. Represented as a `<ul>` element.
    bulletList: {
        content: 'listItem+',
        group: 'block',
        parseDOM: [{ tag: 'ul' }],
        toDOM: ɵ30
    }
};
/**
 * @hidden
 */
exports.schema = new prosemirror_model_1.Schema({
    marks: marks,
    nodes: nodes
});
