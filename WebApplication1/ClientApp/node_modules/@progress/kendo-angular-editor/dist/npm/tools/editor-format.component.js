"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var core_1 = require("@angular/core");
var kendo_angular_toolbar_1 = require("@progress/kendo-angular-toolbar");
var util_1 = require("../util");
var editor_component_1 = require("../editor.component");
var editor_localization_service_1 = require("../localization/editor-localization.service");
/**
 * A component which configures an existing `DropDownListComponent` as an Editor tool
 * ([see example]({% slug toolbartools_editor %}#toc-built-in-tools)).
 * The component associates a `kendo-dropdownlist` with an Editor command that changes the format of a content block and
 * automatically defines the options of the drop-down list and sets its values.
 *
 * @example
 * ```ts-no-run
 * <kendo-toolbar-dropdownlist kendoEditorFormat></kendo-toolbar-dropdownlist>
 * ```
 */
var EditorFormatComponent = /** @class */ (function (_super) {
    tslib_1.__extends(EditorFormatComponent, _super);
    function EditorFormatComponent(editor, localization) {
        var _this = _super.call(this) || this;
        _this.editor = editor;
        _this.localization = localization;
        /**
         * Fires when the user updates the value of the drop-down list.
         */
        _this.valueChange = new core_1.EventEmitter();
        return _this;
    }
    EditorFormatComponent.prototype.ngOnInit = function () {
        var _this = this;
        this.itemDisabled = function (itemArgs) {
            return itemArgs.dataItem.tag === null;
        };
        this.data = [
            { text: 'Paragraph', tag: 'p' },
            { text: 'Quotation', tag: 'blockquote' },
            { text: 'Heading 1', tag: 'h1' },
            { text: 'Heading 2', tag: 'h2' },
            { text: 'Heading 3', tag: 'h3' },
            { text: 'Heading 4', tag: 'h4' },
            { text: 'Heading 5', tag: 'h5' },
            { text: 'Heading 6', tag: 'h6' }
        ];
        setTimeout(function () { return _this.defaultItem = { text: _this.title, tag: null }; });
        this.subs = this.editor.stateChange.subscribe(function (_a) {
            var format = _a.format;
            var index = _this.data.findIndex(function (item) { return item.tag === format.tag; });
            _this.value = index !== -1 ? format.tag : null;
        });
    };
    /**
     * @hidden
     */
    EditorFormatComponent.prototype.onValueChange = function (ev) {
        if (util_1.isPresent(ev)) {
            this.editor.exec('format', { tag: ev });
            this.editor.focus();
            this.valueChange.emit(this.data.find(function (d) { return d.tag === ev; }));
        }
    };
    EditorFormatComponent.prototype.ngOnDestroy = function () {
        this.subs.unsubscribe();
    };
    Object.defineProperty(EditorFormatComponent.prototype, "outerWidth", {
        get: function () {
            if (this.element) {
                return util_1.outerWidth(this.element.nativeElement);
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(EditorFormatComponent.prototype, "title", {
        get: function () {
            return this.localization.get('format');
        },
        enumerable: true,
        configurable: true
    });
    EditorFormatComponent.decorators = [
        { type: core_1.Component, args: [{
                    // tslint:disable-next-line:no-forward-ref
                    providers: [{ provide: kendo_angular_toolbar_1.ToolBarToolComponent, useExisting: core_1.forwardRef(function () { return EditorFormatComponent; }) }],
                    selector: 'kendo-toolbar-dropdownlist[kendoEditorFormat]',
                    template: "\n        <ng-template #toolbarTemplate>\n            <kendo-dropdownlist\n                #element\n                [defaultItem]=\"defaultItem\"\n                [textField]=\"'text'\"\n                [valueField]=\"'tag'\"\n                [data]=\"data\"\n                [(value)]=\"value\"\n                [valuePrimitive]=\"true\"\n                [itemDisabled]=\"itemDisabled\"\n                [attr.title]=\"title\"\n                (valueChange)=\"onValueChange($event)\"\n            >\n                <ng-template kendoDropDownListItemTemplate let-dataItem>\n                    <ng-container [ngSwitch]=\"dataItem.tag\">\n                        <span *ngSwitchCase=\"'h1'\" style=\"display: block; font-size: 2em; margin-left: 0; font-weight: bold;\">\n                            {{ dataItem.text }}\n                        </span>\n\n                        <span *ngSwitchCase=\"'h2'\" style=\"display: block; font-size: 1.5em; margin-left: 0; font-weight: bold;\">\n                            {{ dataItem.text }}\n                        </span>\n\n                        <span *ngSwitchCase=\"'h3'\" style=\"display: block; font-size: 1.17em; margin-left: 0; font-weight: bold;\">\n                            {{ dataItem.text }}\n                        </span>\n\n                        <span *ngSwitchCase=\"'h4'\" style=\"display: block; font-size: 1em; margin-left: 0; font-weight: bold;\">\n                            {{ dataItem.text }}\n                        </span>\n\n                        <span *ngSwitchCase=\"'h5'\" style=\"display: block; font-size: .83em; margin-left: 0; font-weight: bold;\">\n                            {{ dataItem.text }}\n                        </span>\n\n                        <span *ngSwitchCase=\"'h6'\" style=\"display: block; font-size: .67em; margin-left: 0; font-weight: bold;\">\n                            {{ dataItem.text }}\n                        </span>\n\n                        <span *ngSwitchCase=\"'p'\" style=\"display: block; margin-left: 0;\">\n                            {{ dataItem.text }}\n                        </span>\n\n                        <span *ngSwitchCase=\"'blockquote'\" style=\"display: block; margin-left: 0;\">\n                            {{ dataItem.text }}\n                        </span>\n\n                        <span *ngSwitchDefault>{{ dataItem.text }}</span>\n                    </ng-container>\n                </ng-template>\n            </kendo-dropdownlist>\n        </ng-template>\n    "
                },] },
    ];
    /** @nocollapse */
    EditorFormatComponent.ctorParameters = function () { return [
        { type: editor_component_1.EditorComponent, decorators: [{ type: core_1.Host }] },
        { type: editor_localization_service_1.EditorLocalizationService }
    ]; };
    EditorFormatComponent.propDecorators = {
        valueChange: [{ type: core_1.Output }],
        toolbarTemplate: [{ type: core_1.ViewChild, args: ['toolbarTemplate',] }],
        element: [{ type: core_1.ViewChild, args: ['element',] }]
    };
    return EditorFormatComponent;
}(kendo_angular_toolbar_1.ToolBarToolComponent));
exports.EditorFormatComponent = EditorFormatComponent;
