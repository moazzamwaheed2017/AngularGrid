"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var prosemirror_model_1 = require("prosemirror-model");
var prosemirror_state_1 = require("prosemirror-state");
var prosemirror_schema_list_1 = require("prosemirror-schema-list");
var schema_1 = require("./config/schema");
var indent_rules_1 = require("./config/indent-rules");
var util_1 = require("./util");
var _a = schema_1.schema.nodes, bulletList = _a.bulletList, doc = _a.doc, listItem = _a.listItem, orderedList = _a.orderedList;
var getTypeName = function (n) {
    return n instanceof prosemirror_model_1.Node ? n.type.name : n.name;
};
var ɵ0 = getTypeName;
exports.ɵ0 = ɵ0;
var isListType = function (node) {
    var nodeName = typeof node === 'string' ? node : getTypeName(node);
    return nodeName === getTypeName(orderedList) || nodeName === getTypeName(bulletList);
};
var ɵ1 = isListType;
exports.ɵ1 = ɵ1;
var getListTypeFromPos = function (pos) {
    return Array.from(new Array(pos.depth), function (_, index) { return pos.depth - index; })
        .map(function (depth) { return pos.node(depth); })
        .map(getTypeName)
        .find(isListType);
};
var ɵ2 = getListTypeFromPos;
exports.ɵ2 = ɵ2;
var getNodeMarksOfType = function (markType, n) { return n.marks.filter(function (m) { return m.type.name === markType.name; }); };
var ɵ3 = getNodeMarksOfType;
exports.ɵ3 = ɵ3;
var findParentNode = function (predicate) {
    return function (selection) {
        var $from = selection.$from;
        for (var i = $from.depth; i > 0; i--) {
            var node = $from.node(i);
            if (predicate(node)) {
                return { depth: i, node: node };
            }
        }
    };
};
var ɵ4 = findParentNode;
exports.ɵ4 = ɵ4;
var findNthParentNode = function (predicate, depth) {
    if (depth === void 0) { depth = 1; }
    return function (selection) {
        var $from = selection.$from;
        for (var i = $from.depth; i > 0; i--) {
            var node = $from.node(i);
            if (predicate(node)) {
                depth = depth - 1;
                if (depth === 0) {
                    return { depth: i, node: node };
                }
            }
        }
    };
};
var ɵ5 = findNthParentNode;
exports.ɵ5 = ɵ5;
var findNthParentNodeOfType = function (nodeType, depth) {
    if (depth === void 0) { depth = 1; }
    return function (selection) {
        return findNthParentNode(function (node) { return getTypeName(node) === getTypeName(nodeType); }, depth)(selection);
    };
};
var ɵ6 = findNthParentNodeOfType;
exports.ɵ6 = ɵ6;
/**
 * @hidden
 */
exports.getUniqueStyleValues = function (style, cssStyle) {
    if (style.hasNodesWithoutMarks) {
        return '';
    }
    var uniqueMarkValues = style.marks
        .filter(function (m) { return m.type.name === 'style'; })
        .map(function (m) { return m.attrs.style; })
        .map(util_1.split(';'))
        .map(util_1.filter(function (m) { return m.includes(cssStyle); }))
        // guards against empty array
        .map(function (cssStyleValues) { return (cssStyleValues.length !== 0 ? cssStyleValues : [cssStyle + ": INVALID"]); })
        .map(util_1.first)
        .map(util_1.split(':'))
        .map(util_1.last)
        .map(util_1.trim)
        .reduce(function (acc, curr) { return (acc.indexOf(curr) > -1 ? acc : acc.concat([curr])); }, []);
    if (uniqueMarkValues.indexOf('INVALID') > -1 || uniqueMarkValues.length !== 1) {
        return '';
    }
    return uniqueMarkValues[0];
};
/**
 * @hidden
 */
exports.isMarkActive = function (state, markType) {
    var _a = state.selection, from = _a.from, $from = _a.$from, to = _a.to, empty = _a.empty;
    if (empty) {
        return !!markType.isInSet(state.storedMarks || $from.marks());
    }
    else {
        return !!state.doc.rangeHasMark(from, to, markType);
    }
};
/**
 * @hidden
 */
exports.isNodeActive = function (state, nodeType, attrs) {
    var parent = findParentNode(function (node) { return getTypeName(node) === getTypeName(nodeType); })(state.selection);
    if (!parent || (attrs && !Object.keys(attrs).length)) {
        return !!parent;
    }
    return parent.node.hasMarkup(nodeType, attrs);
};
/**
 * @hidden
 */
exports.isInListOfType = function (_a, nodeType) {
    var selection = _a.selection;
    var $anchor = selection.$anchor, $head = selection.$head;
    var topNodes = [];
    var anchorParentName = getListTypeFromPos($anchor);
    var headParentName = getListTypeFromPos($head);
    selection.content().content.descendants(function (n) {
        topNodes = topNodes.concat([n]);
        return false;
    });
    var nonListTopNodes = topNodes.filter(function (n) {
        return getTypeName(n) !== getTypeName(bulletList) && getTypeName(n) !== getTypeName(orderedList);
    });
    // no selection
    if (selection instanceof prosemirror_state_1.TextSelection && selection.$cursor) {
        return getListTypeFromPos(selection.$cursor) === nodeType.name;
    }
    var hasSingleUniqueTopNode = util_1.unique(topNodes.map(getTypeName)).length === 1;
    // with selection
    if (nonListTopNodes.length > 0 || !hasSingleUniqueTopNode) {
        return false;
    }
    // from this point on we have guaranteed that the top nodes are all of the same LIST type
    // same top list node
    var node = util_1.first(topNodes);
    var listChildNodes = [getTypeName(node)];
    node.descendants(function (childNode) {
        if (isListType(childNode)) {
            listChildNodes = listChildNodes.concat([getTypeName(childNode)]);
        }
    });
    if (util_1.last(listChildNodes) !== nodeType.name) {
        return false;
    }
    return anchorParentName === headParentName && anchorParentName === nodeType.name;
};
/**
 * @hidden
 */
exports.getActiveMarks = function (_a, markType) {
    var selection = _a.selection;
    var hasNodesWithoutMarks = false;
    if (selection instanceof prosemirror_state_1.TextSelection && selection.$cursor) {
        return {
            hasNodesWithoutMarks: hasNodesWithoutMarks,
            marks: selection.$cursor.marks().filter(function (m) { return (markType ? m.type.name === markType.name : true); })
        };
    }
    var filtered = [];
    selection.content().content.descendants(function (n) {
        if (n.type.name === 'text') {
            var nodeMarksOfType = markType ? getNodeMarksOfType(markType, n) : n.marks;
            if (n.marks.length > 0 && nodeMarksOfType.length > 0) {
                filtered.push.apply(filtered, nodeMarksOfType);
            }
            else {
                hasNodesWithoutMarks = true;
            }
        }
    });
    return {
        hasNodesWithoutMarks: hasNodesWithoutMarks,
        marks: filtered
    };
};
/**
 * @hidden
 */
exports.getNodeTagName = function (node) {
    var parseRules = node.type.spec.parseDOM || [];
    var nodeAttrs = node.attrs;
    var parseRule;
    if (parseRules.length === 1) {
        parseRule = parseRules[0];
    }
    else {
        // TODO: refactor this
        // removeEmptyEntries is needed due to the default attributes in the schema
        parseRule = parseRules.find(function (rule) {
            // getAttrs needs a DOM Node
            var domNode = prosemirror_model_1.DOMSerializer.fromSchema(schema_1.schema).serializeNode(node);
            return JSON.stringify(rule.getAttrs(domNode)) === JSON.stringify(util_1.removeEmptyEntries(nodeAttrs));
        });
    }
    if (parseRule) {
        // regex is needed since image node has tag = img[src]
        // https://stackoverflow.com/a/25777116
        return parseRule.tag.toLowerCase().replace(/ *\[[^\]]*]/, '');
    }
    else {
        return '';
    }
};
/**
 * @hidden
 */
exports.activeNode = function (state) {
    var node;
    if (state.selection instanceof prosemirror_state_1.AllSelection) {
        node = state.doc;
    }
    else if (state.selection instanceof prosemirror_state_1.TextSelection) {
        var $anchor = state.selection.$anchor;
        var blockNode = $anchor.node($anchor.blockRange().depth);
        var isDoc = getTypeName(blockNode) === getTypeName(doc);
        node = isDoc ? $anchor.node() : blockNode;
    }
    else if (state.selection instanceof prosemirror_state_1.NodeSelection) {
        node = state.selection.node;
    }
    return {
        name: getTypeName(node),
        tag: exports.getNodeTagName(node)
    };
};
/**
 * @hidden
 */
exports.canIndent = function (state, nodeType) {
    return exports.isNodeActive(state, nodeType) && prosemirror_schema_list_1.sinkListItem(nodeType)(state);
};
/**
 * @hidden
 */
exports.canOutdent = function (state, nodeType) {
    var isNestedInOL = !!findNthParentNodeOfType(orderedList, 2)(state.selection);
    var isNestedInUL = !!findNthParentNodeOfType(bulletList, 2)(state.selection);
    return exports.isNodeActive(state, nodeType) && (isNestedInOL || isNestedInUL) && prosemirror_schema_list_1.liftListItem(nodeType)(state);
};
/**
 * @hidden
 */
exports.getMark = function (state, markType) {
    var _a = state.selection, from = _a.from, $from = _a.$from, to = _a.to, empty = _a.empty;
    var stateDoc = state.doc;
    var mark;
    if (empty) {
        mark = markType.isInSet(state.storedMarks || $from.marks());
    }
    else {
        stateDoc.nodesBetween(from, to, function (node) {
            if (node.isInline && !mark) {
                mark = markType.isInSet(node.marks);
            }
        });
    }
    return mark;
};
/**
 * @hidden
 */
exports.getNodeFromSelection = function (state) {
    if (state.selection instanceof prosemirror_state_1.NodeSelection) {
        return state.selection.node;
    }
};
/**
 * @hidden
 */
exports.getSelectionText = function (state) {
    var sel = state.selection;
    if (sel instanceof prosemirror_state_1.TextSelection || sel instanceof prosemirror_state_1.AllSelection) {
        var fragment = sel.content().content;
        return fragment.textBetween(0, fragment.size);
    }
    return '';
};
/**
 * @hidden
 */
exports.getHTML = function (state) {
    var fragment = prosemirror_model_1.DOMSerializer.fromSchema(state.schema).serializeFragment(state.doc.content);
    var element = document.createElement('div');
    element.appendChild(fragment);
    return element.innerHTML;
};
/**
 * @hidden
 */
exports.createContentNode = function (value) {
    var element = document.createElement('div');
    // when using ngModel with name attr, content is null and errors, default params dont help
    element.innerHTML = util_1.safeString(value).trim();
    return prosemirror_model_1.DOMParser.fromSchema(schema_1.schema).parse(element);
};
/**
 * @hidden
 */
exports.hasSameMarkup = function (dom1, dom2) {
    var fragment1 = prosemirror_model_1.Fragment.from(exports.createContentNode(dom1));
    var fragment2 = prosemirror_model_1.Fragment.from(exports.createContentNode(dom2));
    return fragment1.eq(fragment2);
};
/**
 * @hidden
 * Checks if the selection contains a specific type of node.
 */
var hasNode = function (state, nodeType) {
    var _a = state.selection, from = _a.from, to = _a.to;
    var result = false;
    state.doc.nodesBetween(from, to, function (node) {
        result = result || node.type === nodeType;
        return !result;
    });
    return result;
};
var ɵ7 = hasNode;
exports.ɵ7 = ɵ7;
/**
 * @hidden
 */
exports.blockNodes = function (state) {
    var selection = state.selection;
    var from = selection.from, to = selection.to, $from = selection.$from;
    var result = [];
    if (selection.node) {
        if (selection.node.isBlock) {
            result.push(selection.node);
        }
        else if ($from.parent && $from.parent.isBlock) {
            result.push($from.parent);
        }
    }
    else {
        state.doc.nodesBetween(from, to, function (node) {
            if (node.isBlock) {
                result.push(node);
            }
        });
    }
    return result;
};
/**
 * @hidden
 * Checks if any block element in the selection is aligned.
 */
exports.isAligned = function (state, actions) {
    var blocks = exports.blockNodes(state);
    var result = false;
    blocks.forEach(function (node) {
        if (!result && node.type.isTextblock && node.attrs.style) {
            var action = actions.find(function (a) { return a.node === node.type.name; });
            if (action) {
                result = action.style.every(function (style) {
                    return !!style.value && new RegExp(style.name + ":\\s?" + style.value, 'i').test(node.attrs.style);
                });
            }
        }
    });
    return result;
};
/**
 * @hidden
 * Checks if any block element in the selection is indented.
 */
exports.isIndented = function (state, actions) {
    var blocks = exports.blockNodes(state);
    var result = false;
    blocks.forEach(function (node) {
        if (!result && node.type.isTextblock && node.attrs.style) {
            var action = actions.find(function (a) { return a.node === node.type.name; });
            if (action) {
                var reIndent = new RegExp(action.style + ":\\s?\\d+" + action.unit, 'i');
                result = reIndent.test(node.attrs.style);
            }
        }
    });
    return result;
};
/**
 * @hidden
 */
exports.canIndentAsListItem = function (state) { return prosemirror_schema_list_1.sinkListItem(listItem)(state); };
/**
 * @hidden
 */
exports.canOutdentAsListItem = function (state) { return prosemirror_schema_list_1.liftListItem(listItem)(state); };
/**
 * @hidden
 */
exports.canBeIndented = function (state, rules) {
    var nodes = state.schema.nodes;
    return ((exports.isIndented(state, rules) || indent_rules_1.indentRules.some(function (rule) { return nodes[rule.node] && hasNode(state, nodes[rule.node]); })) &&
        !hasNode(state, listItem));
};
