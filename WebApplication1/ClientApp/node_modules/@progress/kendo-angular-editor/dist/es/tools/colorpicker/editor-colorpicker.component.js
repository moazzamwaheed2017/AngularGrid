// tslint:disable:no-forward-ref
import * as tslib_1 from "tslib";
import { Component, Input, Host, forwardRef, ViewChild, ElementRef, TemplateRef } from '@angular/core';
import { ToolBarToolComponent } from '@progress/kendo-angular-toolbar';
import { EditorLocalizationService } from '../../localization/editor-localization.service';
import { outerWidth } from '../../util';
import { EditorComponent } from '../../editor.component';
/**
 * A component which configures an existing ColorPickerComponent as a ToolBar tool.
 * To associate a `kendo-toolbar-colorpicker` with an Editor command that changes the
 * foreground or the background color of the text, use the `kendoEditorForeColor` or `kendoEditorBackColor` directive.
 */
var EditorColorPickerComponent = /** @class */ (function (_super) {
    tslib_1.__extends(EditorColorPickerComponent, _super);
    function EditorColorPickerComponent(editor, localization) {
        var _this = _super.call(this) || this;
        _this.editor = editor;
        _this.localization = localization;
        return _this;
    }
    Object.defineProperty(EditorColorPickerComponent.prototype, "title", {
        /**
         * @hidden
         */
        get: function () {
            return this.localization.get(this.editorCommand);
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @hidden
     */
    EditorColorPickerComponent.prototype.handleValueChange = function (color) {
        this.editor.exec(this.editorCommand, color);
        this.editor.focus();
    };
    /**
     * @hidden
     */
    EditorColorPickerComponent.prototype.handleActiveColorClick = function (event) {
        event.preventOpen();
        this.handleValueChange(event.color);
    };
    Object.defineProperty(EditorColorPickerComponent.prototype, "outerWidth", {
        /**
         * @hidden
         */
        get: function () {
            if (this.element) {
                return outerWidth(this.element.nativeElement);
            }
        },
        enumerable: true,
        configurable: true
    });
    EditorColorPickerComponent.decorators = [
        { type: Component, args: [{
                    providers: [{ provide: ToolBarToolComponent, useExisting: forwardRef(function () { return EditorColorPickerComponent; }) }],
                    selector: 'kendo-toolbar-colorpicker',
                    template: "\n        <ng-template #toolbarTemplate>\n            <kendo-colorpicker\n                #colorpicker\n                [view]=\"'palette'\"\n                [format]=\"'hex'\"\n                [attr.title]=\"title\"\n                [icon]=\"icon\"\n                [value]=\"value\"\n                [paletteSettings]=\"paletteSettings\"\n                (valueChange)=\"handleValueChange($event)\"\n                (activeColorClick)=\"handleActiveColorClick($event)\"\n            >\n            </kendo-colorpicker>\n        </ng-template>\n    "
                },] },
    ];
    /** @nocollapse */
    EditorColorPickerComponent.ctorParameters = function () { return [
        { type: EditorComponent, decorators: [{ type: Host }] },
        { type: EditorLocalizationService }
    ]; };
    EditorColorPickerComponent.propDecorators = {
        value: [{ type: Input }],
        icon: [{ type: Input }],
        paletteSettings: [{ type: Input }],
        editorCommand: [{ type: Input }],
        toolbarTemplate: [{ type: ViewChild, args: ['toolbarTemplate',] }],
        element: [{ type: ViewChild, args: ['colorpicker', { read: ElementRef },] }]
    };
    return EditorColorPickerComponent;
}(ToolBarToolComponent));
export { EditorColorPickerComponent };
