import * as tslib_1 from "tslib";
import { Component, Input } from '@angular/core';
import { FormGroup, FormControl, Validators } from '@angular/forms';
import { DialogContentBase, DialogRef } from '@progress/kendo-angular-dialog';
import { getMark, getSelectionText } from '../prosemirror-utils';
import { schema } from '../config/schema';
import { isPresent } from '../util';
import { EditorLocalizationService } from '../localization/editor-localization.service';
/**
 * @hidden
 */
var FileLinkDialogComponent = /** @class */ (function (_super) {
    tslib_1.__extends(FileLinkDialogComponent, _super);
    function FileLinkDialogComponent(dialog, localization) {
        var _this = _super.call(this, dialog) || this;
        _this.dialog = dialog;
        _this.localization = localization;
        _this.linkForm = new FormGroup({
            'href': new FormControl('', Validators.required),
            'text': new FormControl('', Validators.required),
            'title': new FormControl('')
        });
        return _this;
    }
    FileLinkDialogComponent.prototype.onCancelAction = function () {
        this.dialog.close();
    };
    FileLinkDialogComponent.prototype.onConfirmAction = function () {
        var linkData = this.getData();
        this.editor.exec(this.command, linkData);
        this.dialog.close();
        this.editor.focus();
    };
    Object.defineProperty(FileLinkDialogComponent.prototype, "titleText", {
        get: function () {
            return this.localization.get(this.command);
        },
        enumerable: true,
        configurable: true
    });
    FileLinkDialogComponent.prototype.setData = function (state) {
        if (this.command === 'createLink') {
            this.linkForm.addControl('target', new FormControl());
        }
        var linkMark = getMark(state, schema.marks.link);
        if (linkMark) {
            // const linkMarkRange = getMarkRange(state.selection.$cursor, schema.marks.link);
            // const mark = parentNode.child(cursorNodeIndex).marks.find(m => m.type === markType);
            this.linkForm.reset({
                href: linkMark.attrs.href,
                title: linkMark.attrs.title,
                target: isPresent(linkMark.attrs.target),
                text: this.setLinkText(state)
            });
            return;
        }
        if (!state.selection.empty) {
            this.linkForm.patchValue({
                'text': getSelectionText(state)
            });
        }
    };
    FileLinkDialogComponent.prototype.textForWithPrefix = function (key) {
        var prefix = this.command === 'createLink' ? 'link' : 'file';
        return this.textFor(prefix + key);
    };
    FileLinkDialogComponent.prototype.textFor = function (key) {
        return this.localization.get(key);
    };
    FileLinkDialogComponent.prototype.setLinkText = function (state) {
        var selection = state.selection;
        if (selection.empty && selection.$cursor) {
            var cursor = selection.$cursor;
            var cursorNodeIndex = cursor.index();
            var parentNode = cursor.parent;
            return parentNode.child(cursorNodeIndex).text;
        }
        else {
            return getSelectionText(state);
        }
    };
    FileLinkDialogComponent.prototype.getData = function () {
        var linkData = this.linkForm.value;
        if (isPresent(this.linkForm.controls.target)) {
            linkData.target = linkData.target ? '_blank' : null;
        }
        return linkData;
    };
    FileLinkDialogComponent.decorators = [
        { type: Component, args: [{
                    template: "\n        <kendo-dialog-titlebar>\n            {{ titleText }}\n        </kendo-dialog-titlebar>\n        <div class='k-editor-dialog'>\n            <div class='k-editor-dialog k-popup-edit-form k-window-content k-content'>\n                <div class='k-edit-form-container k-window-content'>\n                    <form novalidate [formGroup]='linkForm'>\n                        <div class='k-edit-label'>\n                            <label (click)='hrefInput.focus()'>{{ textForWithPrefix('WebAddress') }}</label>\n                        </div>\n                        <div class='k-edit-field'>\n                            <input #hrefInput formControlName='href' type='text' class='k-input k-textbox'>\n                        </div>\n\n                        <div class='k-edit-label'>\n                            <label (click)='textInput.focus()'>{{ textForWithPrefix('Text') }}</label>\n                        </div>\n                        <div class='k-edit-field'>\n                            <input #textInput formControlName='text' type='text' class='k-input k-textbox'>\n                        </div>\n\n                        <div class='k-edit-label'>\n                            <label (click)='titleInput.focus()'>{{ textForWithPrefix('Title') }}</label>\n                        </div>\n                        <div class='k-edit-field'>\n                            <input #titleInput formControlName='title' type='text' class='k-input k-textbox'>\n                        </div>\n                        <ng-container *ngIf=\"command === 'createLink'\">\n                            <div class='k-edit-label'></div>\n                            <div class='k-edit-field'>\n                                <input type='checkbox' id='k-target-blank' class='k-checkbox' formControlName='target'>\n                                <label class='k-checkbox-label' for='k-target-blank'>{{ textForWithPrefix('OpenInNewWindow') }}</label>\n                            </div>\n                        </ng-container>\n                    </form>\n                </div>\n            </div>\n        </div>\n        <kendo-dialog-actions>\n            <button kendoButton (click)='onCancelAction()'>{{ textFor('dialogCancel') }}</button>\n            <button kendoButton [disabled]='linkForm.invalid'\n                    (click)='onConfirmAction()' [primary]='true'>{{ textFor('dialogInsert') }}</button>\n        </kendo-dialog-actions>\n    "
                },] },
    ];
    /** @nocollapse */
    FileLinkDialogComponent.ctorParameters = function () { return [
        { type: DialogRef },
        { type: EditorLocalizationService }
    ]; };
    FileLinkDialogComponent.propDecorators = {
        editor: [{ type: Input }],
        command: [{ type: Input }]
    };
    return FileLinkDialogComponent;
}(DialogContentBase));
export { FileLinkDialogComponent };
